Feature: Unified HCP Interaction Dashboard

  In order to tailor my pitch and provide more value in my conversations,
  As a sales representative,
  I want to access a unified view of all my HCP interactions across channels.

  Background:
    Given the tables exist in the purgo_playground schema on Databricks:
      | Table Name                                 |
      | customer_360_raw                           |
      | customer_hcp_interaction                   |

  Scenario Outline: Access HCP Interaction Summary
    Given a sales representative user "<user_id>" is preparing for a meeting
    When the user checks their dashboard
    Then the dashboard displays a summary of past interactions for HCP "<hcp_id>" including:
      | Column             | Value Format             |
      | name               | string                   |
      | email              | string                   |
      | phone              | string                   |
      | interaction_date   | date                     |
      | topic              | string                   |
      | duration_mins      | string                   |
      | engagement_score   | integer                  |
      | is_follow_up       | 1 if engagement_score < 3 else 0 |
      | follow_up_date     | interaction_date + 30 days if is_follow_up = 1 |

    Examples:
      | user_id | hcp_id  |
      | 1001    | ABC123  |
      | 1002    | DEF456  |

  Scenario: Handling Missing Interaction Data
    Given no interactions are present for an HCP with ID "<hcp_id>"
    When the user requests interaction history
    Then the system displays the error message "No interaction data available for the specified HCP."

    Examples:
      | hcp_id  |
      | GHI789  |

  Scenario: Invalid HCP Identifier
    Given an HCP with ID "<hcp_id>" does not exist in the system
    When the system processes the interaction view request
    Then the system logs an error "HCP ID <hcp_id> is invalid."

    Examples:
      | hcp_id  |
      | JKL012  |

  Scenario: Data-Driven HCP Interaction View Creation
    Given Databricks SQL is used to create a permanent view for HCP interactions
    When the SQL script is executed to construct the view
    Then the view incorporates join conditions based on channel for accurate data retrieval:
      | Channel     | Join Type                      |
      | In-person   | Inner join on phone column     |
      | Other       | Inner join on email column     |

    And the columns from the view match the expectations:
      | Column         | Source                        |
      | name           | customer_360_raw              |
      | email          | customer_360_raw              |
      | phone          | customer_360_raw              |
      | interaction_date | customer_hcp_interaction    |
      | topic          | customer_hcp_interaction      |
      | duration_mins  | customer_hcp_interaction      |
      | engagement_score | customer_hcp_interaction    |
      | is_follow_up   | Calculated                    |
      | follow_up_date | Calculated                    |

  Scenario: Error Handling During SQL Execution
    Given an error occurs during the execution of the Databricks SQL script
    When the error is captured
    Then the system outputs an error message "SQL execution failed: <error_description>"

  Scenario: Ensuring Data Integrity
    Given the SQL script for view creation is prepared
    When primary key constraints are configured
    Then data integrity checks ensure unique identification of HCP across systems

  Scenario: Validating Channel Mapping and Rules
    Given mapping file details are verified
    When queries incorporate mapping rules from the provided file
    Then the following channel conditions are correctly applied:
      | If Channel    | Then Join on Column |
      | In-person     | phone               |
      | Webinar       | email               |
      | Email         | email               |

  # SQL Script for Databricks View Creation
  # This script outlines the creation of the view based on the scenario outlines provided.

  """
  -- SQL script begins here

  DROP VIEW IF EXISTS purgo_playground.hcp_unified_interaction_view;
  CREATE VIEW purgo_playground.hcp_unified_interaction_view AS
  SELECT 
    hcp360.name,
    hcp360.email,
    hcp360.phone,
    interaction.interaction_date,
    interaction.topic,
    interaction.duration_mins,
    interaction.engagement_score,
    CASE WHEN interaction.engagement_score < 3 THEN 1 ELSE 0 END AS is_follow_up,
    CASE WHEN interaction.engagement_score < 3 THEN DATE_ADD(interaction.interaction_date, 30) END AS follow_up_date
  FROM purgo_playground.customer_360_raw AS hcp360
  INNER JOIN purgo_playground.customer_hcp_interaction AS interaction
    ON (
      CASE 
        WHEN interaction.channel = 'In-person' THEN hcp360.phone = interaction.phone
        ELSE hcp360.email = interaction.email
      END
    );
  """



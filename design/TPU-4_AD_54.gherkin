Feature: File Quality Check for Sales Data

  Background:
    Given a sales file located at {{dbfs:/FileStore/tables/sales_20240611.csv}}
    And sales table is defined in Unity Catalog as purgo_playground.sales
    And exception table is defined as purgo_playground.sales_exceptions

  Scenario Outline: Validate and Load Sales File Data
    Given the sales file is loaded with settings inferSchema true, header true
    When ensuring the quality of the file
    Then identify missing or empty values for <Country_cd>, <Product_id>, and <sales_date>
    And validate if <qty_sold> is numeric
    And validate that <sales_date> is in the format yyyy-mm-dd
    And ensure <Product_id> is unique
    And ensure <Country_cd> is not null
    Then raise an error record for any validation failure
    And load valid data into the sales table with mergeSchema true
    And load error records into the exception table with mergeSchema true

    Examples: Sales Data Validation Rules
      | Country_cd | Product_id | qty_sold | sales_date   |
      | USA        | P123       | 10       | 2023-06-11   |
      | CAN        | P124       | NotNum   | 2023-06-12   |
      | GER        | P123       | 5        | 202306-13    |
      | FRA        | P126       | 12       | 2023-06-14   |
      |           | P127       | 15       | 2023-06-15   |

  Scenario: Happy Path for Valid File Loading
    Given a valid sales file with correct structure and values
    When performing the file quality checks
    Then no errors are found
    And the file is loaded into the sales table successfully
    And no records are added to the exception table

  Scenario: Handling Missing or Empty Fields
    Given a sales file with empty <Country_cd>
    When performing the file quality checks
    Then an error is logged for empty <Country_cd>
    And the error record is stored in the exception table

    Examples: Missing Country Code
      | Country_cd | Product_id | qty_sold | sales_date   |
      |            | P128       | 20       | 2023-06-16   |

  Scenario: Handling Non-numeric Quantity Sold
    Given a sales file with non-numeric <qty_sold>
    When performing the file quality checks
    Then an error is logged for non-numeric <qty_sold>
    And the error record is stored in the exception table

    Examples: Non-numeric Quantity Sold
      | Country_cd | Product_id | qty_sold | sales_date   |
      | UK         | P129       | NaN      | 2023-06-17   |

  Scenario: Handling Duplicate Product IDs
    Given a sales file with duplicate <Product_id>
    When performing the file quality checks
    Then an error is logged for duplicate <Product_id>
    And the error record is stored in the exception table

    Examples: Duplicate Product IDs
      | Country_cd | Product_id | qty_sold | sales_date   |
      | AUS        | P130       | 25       | 2023-06-18   |
      | AUS        | P130       | 30       | 2023-06-19   |

  Scenario: Handling Incorrect Date Format
    Given a sales file with incorrect date format in <sales_date>
    When performing the file quality checks
    Then an error is logged for incorrect <sales_date> format
    And the error record is stored in the exception table

    Examples: Incorrect Date Format
      | Country_cd | Product_id | qty_sold | sales_date   |
      | ITA        | P131       | 35       | 202306-20    |

  Scenario: Load Process on Validated Data
    Given the sales file passed all validations
    When loading into the target sales table
    Then the operation uses mergeSchema enabled
    And data is committed to the sales table successfully
